hydra:
  run:
    dir: ckpts/${model.name}_${model.mel_spec.mel_spec_type}_${model.tokenizer}_${datasets.name}/${now:%Y-%m-%d}/${now:%H-%M-%S}

datasets:
  name: IndicTTS_Hindi_CSV_char  # dataset name matching your prepared folder
  batch_size_per_gpu: 19200  # Adjusted for smaller dataset
  batch_size_type: frame  # frame | sample
  max_samples: 32  # Max sequences per batch - reduced for Hindi dataset
  num_workers: 8

optim:
  epochs: 50  # Increased epochs for smaller dataset
  learning_rate: 5e-5  # Slightly reduced learning rate
  num_warmup_updates: 5000  # Reduced warmup for smaller dataset
  grad_accumulation_steps: 1  # note: updates = steps / grad_accumulation_steps
  max_grad_norm: 1.0  # gradient clipping
  bnb_optimizer: False  # use bnb 8bit AdamW optimizer or not

model:
  name: F5TTS_v1_Base_Hindi_CSV  # model name
  tokenizer: char  # char tokenizer for Hindi Devanagari script
  tokenizer_path: null  # will be auto-generated from your dataset
  backbone: DiT
  arch:
    dim: 1024
    depth: 22
    heads: 16
    ff_mult: 2
    text_dim: 512
    text_mask_padding: True
    qk_norm: null  # null | rms_norm
    conv_layers: 4
    pe_attn_head: null
    attn_backend: torch  # torch | flash_attn
    attn_mask_enabled: False
    checkpoint_activations: False  # recompute activations and save memory for extra compute
  mel_spec:
    target_sample_rate: 24000  # F5-TTS uses 24kHz, will resample from 48kHz
    n_mel_channels: 100
    hop_length: 256
    win_length: 1024
    n_fft: 1024
    mel_spec_type: vocos  # vocos | bigvgan
  vocoder:
    is_local: False  # use local offline ckpt or not
    local_path: null  # local vocoder path

ckpts:
  logger: wandb  # wandb | tensorboard | null
  log_samples: True  # infer random sample per save checkpoint
  save_per_updates: 2000  # save checkpoint more frequently for smaller dataset
  keep_last_n_checkpoints: 5  # Keep last 5 checkpoints
  last_per_updates: 1000  # save last checkpoint per updates
  save_dir: ckpts/${model.name}_${model.mel_spec.mel_spec_type}_${model.tokenizer}_${datasets.name} 